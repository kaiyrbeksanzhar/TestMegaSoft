@model MegaSoft1.Models.Additional.PersonalDateCreateMdl

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Create", "PersonalDate", FormMethod.Post,
 new { id = "regForm" }))
{
    @Html.AntiForgeryToken()

    <h1>Заполните форму:</h1>
    if (ViewBag.ErrorMessage != null)
    {
        <h4>@ViewBag.ErrorMessage</h4>
    }
    <!-- One "tab" for each step in the form: -->
    <div class="tab">
        Имя перcонала:
        <p><input placeholder="Айдай" name="Name" oninput="this.className = ''"></p>
    </div>

    <div class="tab">
        Возраст:
        <p><input placeholder="18" name="Age" oninput="this.className = ''"></p>
    </div>

    <div class="tab">
        Дата рождения:
        <p><input placeholder="18.09.1995" type="date" name="Birthday" oninput="this.className = ''"></p>
    </div>

    <div class="tab">
        Семейное положение:
        <p>
            @Html.EnumDropDownListFor(m => m.MaritalStatus, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
        </p>
    </div>

    <div class="tab">
        Пол:
        <p>
            @Html.EnumDropDownListFor(model => model.Gender, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
        </p>
    </div>

    <div class="tab">
        Любите вы прогарммировать?:
        <p>
            Да:<input type="checkbox" name="LoveToProgram" value="1" />
            Нет:<input type="checkbox" name="LoveToProgram" value="2" />
            @Html.ValidationMessageFor(model => model.LoveToProgram, "", new { @class = "text-danger" })
        </p>
    </div>

    <div style="overflow:auto;">
        <div style="float:right;">
            <button type="button" id="prevBtn" onclick="nextPrev(-1)">Предыдущий</button>
            <button type="button" id="nextBtn" onclick="nextPrev(1)">Дальше</button>
        </div>
    </div>

    <!-- Circles which indicates the steps of the form: -->
    <div style="text-align:center;margin-top:40px;">
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
    </div>

}

<script type="text/javascript">
    var currentTab = 0; // Current tab is set to be the first tab (0)
    showTab(currentTab); // Display the current tab

    function showTab(n) {
        // This function will display the specified tab of the form ...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        // ... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Submit";
        } else {
            document.getElementById("nextBtn").innerHTML = "Next";
        }
        // ... and run a function that displays the correct step indicator:
        fixStepIndicator(n)
    }

    function nextPrev(n) {
        // This function will figure out which tab to display
        var x = document.getElementsByClassName("tab");
        // Exit the function if any field in the current tab is invalid:
        if (n == 1 && !validateForm()) return false;
        // Hide the current tab:
        x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
        currentTab = currentTab + n;
        // if you have reached the end of the form... :
        if (currentTab >= x.length) {
            //...the form gets submitted:
            document.getElementById("regForm").submit();
            return false;
        }
        // Otherwise, display the correct tab:
        showTab(currentTab);
    }

    function validateForm() {
        // This function deals with validation of the form fields
        var x, y, i, valid = true;
        x = document.getElementsByClassName("tab");
        y = x[currentTab].getElementsByTagName("input");
        // A loop that checks every input field in the current tab:
        for (i = 0; i < y.length; i++) {
            // If a field is empty...
            if (y[i].value == "") {
                // add an "invalid" class to the field:
                y[i].className += " invalid";
                // and set the current valid status to false:
                valid = false;
            }
        }
        // If the valid status is true, mark the step as finished and valid:
        if (valid) {
            document.getElementsByClassName("step")[currentTab].className += " finish";
        }
        return valid; // return the valid status
    }

    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class to the current step:
        x[n].className += " active";
    }
</script>

<div>
    @Html.ActionLink("Назад", "Index")
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
